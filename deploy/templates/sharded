[Unit]
Description = pfs service: {{.Name}}
After = docker.service storage.service
Requires = docker.service

[Service]
TimeoutStartSec = 300
ExecStartPre = -/bin/sh -c "echo $(docker kill {{.Name}}-{{.Shard}}-{{.Nshards}})"
ExecStartPre = -/bin/sh -c "echo $(docker rm {{.Name}}-{{.Shard}}-{{.Nshards}})"
ExecStartPre = /bin/sh -c "echo $(docker pull {{.Container}})"
ExecStart = /bin/sh -c "echo $(docker run \
            --privileged=true \
            --name {{.Name}}-{{.Shard}}-{{.Nshards}} \
            -v /:/host:ro \
            -v /var/lib/pfs/vol:/host/var/lib/pfs/vol \
            -v /var/lib/pfs:/var/lib/pfs \
            -v /var/run/docker.sock:/var/run/docker.sock \
            -e AWS_ACCESS_KEY_ID=`etcdctl get /pfs/creds/AWS_ACCESS_KEY_ID` \
            -e AWS_SECRET_ACCESS_KEY=`etcdctl get /pfs/creds/AWS_SECRET_ACCESS_KEY` \
            -p {{.Port}}:80 \
            -i {{.Container}} \
            /go/bin/{{.Name}} {{.Shard}}-{{.Nshards}} %H:{{.Port}})"
ExecStop = /bin/sh -c "echo $(docker rm -f {{.Name}}-{{.Shard}}-{{.Nshards}})"
Restart = always


[X-Fleet]
Conflicts={{.Name}}-{{.Shard}}-{{.Nshards}}*
