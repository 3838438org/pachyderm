[Unit]
Description = pfs service: {{.Name}}
After = docker.service
Requires = docker.service

[Service]
TimeoutStartSec = 300
ExecStartPre = -/bin/sh -c "echo $(docker kill {{.Name}}-{{.Shard}}-{{.Nshards}})"
ExecStartPre = -/bin/sh -c "echo $(docker rm {{.Name}}-{{.Shard}}-{{.Nshards}})"
ExecStartPre = /bin/sh -c "echo $(docker pull {{.Container}})"
ExecStartPre = -/bin/sh -c "echo $(mkdir /var/lib/pfs)"
ExecStartPre = -/bin/sh -c "echo $(docker run --privileged=true -v /var/lib/pfs:/var/lib/pfs -i {{.Container}} truncate /var/lib/pfs/data.img -s 10G)"
ExecStartPre = -/bin/sh -c "echo $(docker run --privileged=true -v /var/lib/pfs:/var/lib/pfs -i {{.Container}} mkfs.btrfs /var/lib/pfs/data.img)"
ExecStartPre = -/bin/sh -c "echo $(mkdir -p /var/lib/pfs/vol)"
ExecStartPre = -/bin/sh -c "echo $(mount /var/lib/pfs/data.img /var/lib/pfs/vol)"
ExecStart = /bin/sh -c "echo $(docker run \
            --privileged=true \
            --name {{.Name}}-{{.Shard}}-{{.Nshards}} \
            -v /var/lib/pfs:/var/lib/pfs \
            -v /var/run/docker.sock:/var/run/docker.sock \
            -e AWS_ACCESS_KEY_ID=`etcdctl get /pfs/creds/AWS_ACCESS_KEY_ID` \
            -e AWS_SECRET_ACCESS_KEY=`etcdctl get /pfs/creds/AWS_SECRET_ACCESS_KEY` \
            -p {{.Port}}:80 \
            -i {{.Container}} \
            /go/bin/{{.Name}} {{.Shard}}-{{.Nshards}})"
ExecStop = /bin/sh -c "echo $(docker rm -f {{.Name}}-{{.Shard}}-{{.Nshards}})"
