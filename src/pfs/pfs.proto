syntax = "proto3";

import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";

package pfs;

// CommitType represents the type of commit.
enum CommitType {
  COMMIT_TYPE_NONE = 0;
  COMMIT_TYPE_READ = 1;
  COMMIT_TYPE_WRITE = 2;
}

// Repository represents a repository.
message Repository {
  string name = 1;
}

// Commit represents a specific commit in a repository.
message Commit {
  Repository repository = 1;
  string id = 2;
}

// Path represents the full path to a file or directory within PFS.
message Path {
  Commit commit = 1;
  string path = 2;
}

// Shard represents a dynamic shard within PFS.
// number must always be less than modulo.
message Shard {
  uint64 number = 1;
  uint64 modulo = 2;
}

// CommitInfo represents information about a commit.
message CommitInfo {
  Commit commit = 1;
  CommitType commit_type = 2;
}

message InitRepositoryRequest {
  Repository repository = 1;
  bool redirect = 2;
}

message GetFileRequest {
  Path path = 1;
}

message MakeDirectoryRequest {
  Path path = 1;
  bool redirect = 2;
}

message PutFileRequest {
  Path path = 1;
  bytes value = 2;
}

message ListFilesRequest {
  Path path = 1;
  Shard shard = 2;
}

message ListFilesResponse {
  repeated Path path = 1;
}

message GetParentRequest {
  Commit commit = 1;
}

message GetParentResponse {
  Commit commit = 1;
}

message BranchRequest {
  Commit commit = 1;
  bool redirect = 2;
  Commit new_commit = 3;
}

message BranchResponse {
  Commit commit = 1;
}

message CommitRequest {
  Commit commit = 1;
}

message GetCommitInfoRequest {
  Commit commit = 1;
}

message GetCommitInfoResponse {
  CommitInfo commit_info = 1;
}

service Api {
  // InitRepository creates a new repository.
  // An error is returned if the specified repository already exists.
  rpc InitRepository(InitRepositoryRequest) returns (google.protobuf.Empty) {}
  // GetFile returns a byte stream of the specified file.
  // An error is returned if the specified commit is a write commit.
  rpc GetFile(GetFileRequest) returns (stream google.protobuf.BytesValue) {}
  // MakeDirectory makes a directory on the file system.
  rpc MakeDirectory(MakeDirectoryRequest) returns (google.protobuf.Empty) {}
  // PutFile writes the specified file to PFS.
  // An error is returned if the specified commit is not a write commit.
  rpc PutFile(PutFileRequest) returns (google.protobuf.Empty) {}
  // ListFiles lists the files within a directory.
  // An error is returned if the specified path is not a directory.
  rpc ListFiles(ListFilesRequest) returns (ListFilesResponse) {}
  // GetParent gets the parent commit ID of the specified commit.
  rpc GetParent(GetParentRequest) returns (GetParentResponse) {}
  // Branch creates a new write commit from a base commit.
  // An error is returned if the base commit is not a read commit.
  rpc Branch(BranchRequest) returns (BranchResponse) {}
  // Commit turns the specified write commit into a read commit.
  // An error is returned if the specified commit is not a write commit.
  rpc Commit(CommitRequest) returns (google.protobuf.Empty) {}
  // GetCommitInfo returns the CommitInfo for a commit.
  rpc GetCommitInfo(GetCommitInfoRequest) returns (GetCommitInfoResponse) {}
}

message PullDiffRequest {
  Commit commit = 1;
  uint64 shard = 2;
}

message PushDiffRequest {
  Commit commit = 1;
  uint64 shard = 2;
  bytes value = 3;
}

service InternalApi {
  // PullDiff pulls a binary stream of the diff from the specified
  // commit to the commit's parent.
  rpc PullDiff(PullDiffRequest) returns (stream google.protobuf.BytesValue) {}
  // Push diff pushes a diff from the specified commit.
  rpc PushDiff(PushDiffRequest) returns (google.protobuf.Empty) {}
}
